%% data importraw_data = load('welldata.mat');raw_data=raw_data.welldata.data_2014_11;    % change directory for simplicity% model = load('model_building.mat');% model = model.model;    % change directory for simplicity%% parameter setting num_sample = 1440;    % sample numbernum_training = 0.75 * num_sample;    % training set number num_verifying = 0.25 * num_sample;    %verification set numberbuilding_id = [1 8 10 11 13 16 20]';     % building ID% building_id = [1 8 10 11 13 16 20]';     % building IDnum_building = length(building_id);    % building numbermodel_order = 2;    % model order model.overall_data.tau_in = [];for k=1:num_building    temp_focused_building_data = raw_data(building_id(k,1)).building;    model.individual_data(k).tau_in = temp_focused_building_data(:,4:end);    model.overall_data.tau_in =  [model.overall_data.tau_in, model.individual_data(k).tau_in];    clear temp_focused_building_data;    endnum_zone = size(model.overall_data.tau_in,2);    % number of zones in the building cluster%% ratio generation for huber estmiaterand_m = rand(num_sample,num_zone+3); % 1-64:tau_in; 65:h_load; 66:tau_amb; 67:radiation;[m,n] = size(rand_m);p_1 = 0.05;p_2 = 0.05;ratio_m = zeros(num_sample,num_zone+3);for i = 1:m    for j = 1:n        if rand_m(i,j)>0 && rand_m(i,j)<=p_1            if j>0 && j<=64 || j == 66                ratio_m(i,j) = 2 ;            else                ratio_m(i,j) = 2;            end        elseif rand_m(i,j) > p_1 && rand_m(i,j)<=p_1+p_2            ratio_m(i,j) = 0.5;        else            ratio_m(i,j) = 1;        end    endendsave("noise_ratio_for_tau_in.mat","ratio_m");